import numpy as np
import scipy.sparse as sp
import json
import time

from .Dataloader import Dataloader

class DataLoaderPolyvore(Dataloader):
    """
    Load polyvore data.
    """
    def __init__(self):
        super(DataLoaderPolyvore, self).__init__(path='data/polyvore/dataset/')

    def init_phase(self, phase='test'):
        # print('init phase: {}'.format(phase))
        # assert phase in ['train', 'valid', 'test']
        path_dataset = self.path_dataset
        adj_file = path_dataset + 'adj_{}.npz'.format(phase)
        feats_file = path_dataset + 'features_{}.npz'.format(phase)
        np.random.seed(1234)

        adj = sp.load_npz(adj_file).astype(np.int32)
        setattr(self, '{}_adj'.format(phase), adj)
        node_features = sp.load_npz(feats_file)
        setattr(self, '{}_features'.format(phase), node_features)

        # get lower tiangle of the adj matrix to avoid duplicate edges
        setattr(self, 'lower_{}_adj'.format(phase), sp.tril(adj).tocsr())

        # questions_file = path_dataset + 'questions_test.json'
        # questions_file_resampled = questions_file.replace('questions', 'questions_RESAMPLED')
        # with open(questions_file) as f:
        #     self.questions = json.load(f)
        # with open(questions_file_resampled) as f:
        #     self.questions_resampled = json.load(f)

    def get_phase(self, phase='test'):
        # print('get phase: {}'.format(phase))
        # assert phase in ['train', 'valid', 'test']

        lower_adj = getattr(self, 'lower_{}_adj'.format(phase))

        # get the positive edges

        pos_r_idx, pos_c_idx = lower_adj.nonzero()
        pos_labels = np.array(lower_adj[pos_r_idx, pos_c_idx]).squeeze()

        # split the positive edges into the ones used for evaluation and the ones used as message passing
        n_pos = pos_labels.shape[0] # number of positive edges
        perm = list(range(n_pos))
        np.random.shuffle(perm)
        pos_labels, pos_r_idx, pos_c_idx = pos_labels[perm], pos_r_idx[perm], pos_c_idx[perm]
        n_eval = int(n_pos/2)
        mp_pos_labels, mp_pos_r_idx, mp_pos_c_idx = pos_labels[n_eval:], pos_r_idx[n_eval:], pos_c_idx[n_eval:]
        # this are the positive examples that will be used to compute the loss function
        eval_pos_labels, eval_pos_r_idx, eval_pos_c_idx = pos_labels[:n_eval], pos_r_idx[:n_eval], pos_c_idx[:n_eval]

        # get the negative edges

        # print('Sampling negative edges...')
        before = time.time()
        n_train_neg = eval_pos_labels.shape[0] # set the number of negative training edges that will be needed to sample at each iter
        neg_labels = np.zeros((n_train_neg))
        # get the possible indexes to be sampled (basically all indexes if there aren't restrictions)
        poss_nodes = np.arange(lower_adj.shape[0])

        neg_r_idx = np.zeros((n_train_neg))
        neg_c_idx = np.zeros((n_train_neg))

        for i in range(n_train_neg):
            r_idx, c_idx = self.get_negative_training_edge(poss_nodes, poss_nodes.shape[0], lower_adj)
            neg_r_idx[i] = r_idx
            neg_c_idx[i] = c_idx
        # print('Sampling done, time elapsed: {}'.format(time.time() - before))

        # build adj matrix
        adj = sp.csr_matrix((
                    np.hstack([mp_pos_labels, mp_pos_labels]),
                    (np.hstack([mp_pos_r_idx, mp_pos_c_idx]), np.hstack([mp_pos_c_idx, mp_pos_r_idx]))
                ),
                shape=(lower_adj.shape[0], lower_adj.shape[0])
            )
        # remove the labels of the negative edges which are 0
        adj.eliminate_zeros()

        labels = np.append(eval_pos_labels, neg_labels)
        r_idx = np.append(eval_pos_r_idx, neg_r_idx)
        c_idx = np.append(eval_pos_c_idx, neg_c_idx)

        return getattr(self, '{}_features'.format(phase)), adj, labels, r_idx, c_idx

    def get_test_questions(self, resampled=False):
        """
        Return the FITB 'questions' in form of node indexes
        """
        # each question consists on N*4 edges to predict
        # self.questions is a list of questions with N elements and 4 possible choices (answers)
        flat_questions = []
        gt = []
        q_ids = [] # this list indicates to which question does each edge belongs to
        valid = []
        q_id = 0
        questions = self.questions if not resampled else self.questions_resampled
        for question in questions:
            for index in question[0]: # indexes of outfit nodes
                i = 0
                for index_answer in question[1]: # indexes of possible choices answers
                    flat_questions.append([index, index_answer]) # append the edge
                    if i == 0:
                        gt.append(1) # the correct connection is the first
                    else:
                        gt.append(0)
                    # a link is valid if the candidate item is from the same category as the missing item
                    valid.append(int(question[2][i] == question[3]))
                    i += 1
                    q_ids.append(q_id)
            q_id += 1

        assert len(flat_questions) == len(gt) and len(q_ids) == len(gt) and len(gt) == len(valid)
        assert len(self.questions) == max(q_ids)+1

        # flat questions contains edges [u,v]
        # gt contains the ground truth label for each edge
        # q_ids indicates to which question does each query edge belong to

        flat_questions = np.array(flat_questions)
        gt = np.array(gt)
        q_ids = np.array(q_ids)
        valid = np.array(valid)

        # now build the adj for message passing for the questions, by removing the edges that will be evaluated
        lower_adj = getattr(self, 'lower_{}_adj'.format('test'))

        full_adj = lower_adj + lower_adj.transpose()
        full_adj = full_adj.tolil()
        for edge, label in zip(flat_questions, gt):
            u, v = edge
            full_adj[u, v] = 0
            full_adj[v, u] = 0

        full_adj = full_adj.tocsr()
        full_adj.eliminate_zeros()

        # make sure that none of the query edges are in the adj matrix
        count_edges = 0
        count_pos = 0
        for edge in flat_questions:
            u,v = edge
            if full_adj[u,v] > 0:
                count_pos += 1
            count_edges += 1
        assert count_pos == 0

        return full_adj, flat_questions[:, 0], flat_questions[:, 1], gt, q_ids, valid

    def yield_test_questions_K_edges(self, question, resampled=False, K=1, subset=False, expand_outfit=False):
        """
        Yields questions, each of them with their own adj matrix.
        Each node on the question will be expanded to create K edges, so the adj
        matrix will have K*N edges.
        Also, the edges between the nodes of the outfit will be also present (except for the correct choice edges).
        The method to get this edges will be BFS.

        Args:
            resampled: if True, use the resampled version
            K: number of edges to expand for each question node
            subset: if true, use only a subset of the outfit as the query, and
                    use the rest as links to the choices.

        Returns:
            yields questions
        """
        assert K >= 0
        from utils import Graph

        # each question consists on N*4 edges to predict
        # self.questions is a list of questions with N elements and 4 possible choices (answers)
        # questions = self.questions if not resampled else self.questions_resampled
        n_nodes = self.test_adj.shape[0]
        full_choices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 68, 69, 70, 71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 112, 116, 117, 118, 119, 120, 121, 121, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 145, 146, 147, 148, 149, 150, 151, 152, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 164, 165, 166, 167, 181, 183, 184, 185, 186, 188, 189, 190, 191, 192, 195, 196, 197, 198, 199, 200, 200, 201, 202, 203, 204, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 256, 257, 262, 263, 264, 266, 268, 269, 271, 272, 273, 274, 275, 277, 278, 280, 281, 281, 282, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 374, 376, 377, 378, 379, 380, 381, 382, 383, 446, 447, 448, 449, 450, 451, 452, 455, 456, 467, 468, 469, 470, 471, 472, 473, 474, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 495, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 517, 519, 520, 521, 523, 524, 525, 526, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 573, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 623, 624, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 640, 641, 642, 643, 644, 645, 647, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 716, 719, 721, 722, 723, 724, 725, 726, 728, 729, 730, 731, 732, 741, 742, 743, 744, 745, 748, 749, 750, 751, 752, 753, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 766, 769, 770, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 781, 782, 784, 786, 788, 789, 791, 792, 793, 794, 795, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 852, 853, 855, 856, 856, 857, 858, 859, 860, 861, 862, 863, 865, 874, 875, 876, 877, 878, 879, 880, 881, 881, 882, 883, 884, 885, 886, 887, 887, 889, 891, 893, 893, 894, 896, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 932, 934, 935, 936, 937, 939, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 974, 975, 977, 978, 979, 982, 983, 984, 985, 986, 987, 988, 989, 990, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1026, 1027, 1028, 1029, 1030, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1098, 1098, 1099, 1100, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1122, 1123, 1123, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1146, 1147, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1157, 1158, 1159, 1160, 1161, 1161, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1170, 1171, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1183, 1197, 1199, 1200, 1202, 1203, 1218, 1220, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1272, 1288, 1289, 1290, 1291, 1293, 1293, 1294, 1295, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1308, 1310, 1311, 1312, 1313, 1314, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1337, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1353, 1355, 1355, 1356, 1357, 1361, 1362, 1363, 1364, 1366, 1367, 1368, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1386, 1387, 1388, 1388, 1391, 1391, 1392, 1393, 1393, 1394, 1395, 1396, 1397, 1400, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1411, 1412, 1413, 1414, 1415, 1416, 1418, 1419, 1420, 1421, 1422, 1425, 1426, 1427, 1429, 1431, 1432, 1433, 1434, 1436, 1437, 1438, 1439, 1440, 1441, 1443, 1444, 1445, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1460, 1461, 1462, 1463, 1464, 1465, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1477, 1479, 1480, 1481, 1482, 1483, 1484, 1488, 1489, 1490, 1491, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1507, 1508, 1509, 1511, 1512, 1513, 1514, 1515, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1540, 1541, 1543, 1546, 1547, 1548, 1549, 1550, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1576, 1577, 1578, 1579, 1583, 1583, 1584, 1585, 1586, 1587, 1587, 1588, 1590, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1613, 1614, 1614, 1615, 1616, 1617, 1618, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1629, 1634, 1635, 1635, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1648, 1649, 1650, 1651, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1665, 1666, 1667, 1668, 1669, 1670, 1672, 1691, 1692, 1693, 1693, 1694, 1695, 1696, 1698, 1699, 1699, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1710, 1715, 1716, 1717, 1718, 1719, 1720, 1722, 1723, 1724, 1725, 1726, 1726, 1728, 1729, 1731, 1732, 1733, 1734, 1736, 1739, 1740, 1741, 1743, 1744, 1745, 1748, 1749, 1750, 1752, 1754, 1754, 1754, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1784, 1785, 1788, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1804, 1805, 1806, 1808, 1809, 1810, 1811, 1812, 1815, 1816, 1817, 1824, 1825, 1826, 1827, 1835, 1836, 1837, 1838, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1847, 1848, 1849, 1850, 1851, 1853, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1863, 1864, 1865, 1866, 1868, 1869, 1871, 1873, 1875, 1876, 1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1901, 1902, 1903, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1930, 1932, 1932, 1933, 1933, 1934, 1934, 1935, 1935, 1938, 1939, 1941, 1942, 1944, 1945, 1946, 1948, 1949, 1950, 1954, 1955, 1956, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1980, 1981, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2050, 2051, 2052, 2053, 2054, 2055, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2072, 2072, 2073, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2094, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111, 2112, 2114, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2126, 2130, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2138, 2141, 2142, 2143, 2147, 2148, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172, 2173, 2173, 2174, 2175, 2175, 2176, 2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2241, 2242, 2243, 2244, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2251, 2252, 2253, 2254, 2255, 2256, 2257, 2258, 2259, 2260, 2261, 2263, 2264, 2265, 2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2289, 2290, 2291, 2292, 2294, 2295, 2295, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2313, 2314, 2315, 2316, 2319, 2320, 2321, 2322, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332, 2332, 2333, 2334, 2335, 2336, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2351, 2352, 2353, 2356, 2357, 2358, 2359, 2360, 2361, 2364, 2367, 2368, 2369, 2370, 2371, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2386, 2388, 2389, 2392, 2393, 2395, 2396, 2397, 2398, 2399, 2399, 2401, 2402, 2403, 2404, 2405, 2407, 2412, 2413, 2414, 2415, 2416, 2418, 2419, 2420, 2422, 2423, 2424, 2427, 2428, 2429, 2430, 2431, 2432, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2443, 2444, 2445, 2446, 2447, 2448, 2449, 2450, 2451, 2453, 2454, 2455, 2456, 2457, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476, 2477, 2478, 2479, 2480, 2481, 2482, 2484, 2485, 2486, 2488, 2489, 2492, 2494, 2495, 2497, 2498, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2508, 2509, 2510, 2511, 2512, 2520, 2521, 2522, 2523, 2524, 2525, 2526, 2527, 2528, 2529, 2531, 2532, 2533, 2534, 2535, 2536, 2536, 2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546, 2547, 2548, 2549, 2551, 2552, 2554, 2555, 2556, 2557, 2558, 2559, 2560, 2563, 2564, 2565, 2567, 2568, 2569, 2571, 2572, 2573, 2574, 2575, 2576, 2578, 2579, 2580, 2583, 2585, 2587, 2589, 2590, 2591, 2592, 2593, 2594, 2596, 2597, 2598, 2600, 2601, 2602, 2603, 2604, 2605, 2606, 2607, 2608, 2609, 2610, 2611, 2612, 2614, 2615, 2617, 2618, 2619, 2620, 2621, 2623, 2624, 2625, 2627, 2628, 2630, 2639, 2640, 2641, 2643, 2644, 2645, 2646, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2654, 2663, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2693, 2694, 2695, 2696, 2697, 2698, 2700, 2703, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2743, 2744, 2745, 2746, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2753, 2754, 2757, 2758, 2759, 2761, 2762, 2763, 2764, 2765, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783, 2793, 2794, 2795, 2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2817, 2818, 2820, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2832, 2834, 2835, 2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2855, 2856, 2857, 2858, 2864, 2865, 2866, 2867, 2868, 2869, 2872, 2873, 2874, 2875, 2878, 2879, 2880, 2881, 2882, 2886, 2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2896, 2896, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906, 2907, 2909, 2911, 2912, 2913, 2914, 2915, 2921, 2922, 2923, 2924, 2925, 2926, 2931, 2932, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2942, 2942, 2942, 2944, 2945, 2946, 2946, 2948, 2951, 2952, 2953, 2954, 2955, 2957, 2957, 2958, 2958, 2959, 2959, 2960, 2960, 2961, 2961, 2962, 2963, 2965, 2966, 2966, 2967, 2968, 2969, 2970, 2971, 2972, 2974, 2977, 2978, 2979, 2980, 2981, 2983, 2985, 2986, 2988, 2989, 2990, 2991, 2992, 2993, 2997, 2998, 2999, 3001, 3002, 3003, 3004, 3005, 3006, 3008, 3009, 3010, 3012, 3013, 3014, 3015, 3016, 3017, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3083, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3093, 3095, 3096, 3101, 3102, 3103, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3125, 3126, 3127, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3141, 3148, 3149, 3149, 3150, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3175, 3176, 3176, 3179, 3180, 3180, 3181, 3182, 3184, 3185, 3186, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3213, 3214, 3215, 3216, 3218, 3219, 3220, 3221, 3222, 3223, 3225, 3226, 3227, 3228, 3229, 3230, 3239, 3240, 3242, 3243, 3244, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3255, 3256, 3257, 3258, 3259, 3260, 3260, 3261, 3265, 3266, 3267, 3271, 3273, 3275, 3277, 3278, 3279, 3280, 3281, 3284, 3285, 3286, 3287, 3288, 3289, 3307, 3308, 3309, 3310, 3311, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3334, 3336, 3339, 3340, 3341, 3342, 3343, 3344, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385, 3386, 3387, 3390, 3391, 3393, 3394, 3394, 3395, 3396, 3397, 3398, 3399, 3400, 3401, 3402, 3403, 3404, 3405, 3406, 3407, 3408, 3409, 3410, 3412, 3413, 3414, 3415, 3417, 3418, 3419, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3429, 3430, 3431, 3432, 3434, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3442, 3443, 3444, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3453, 3453, 3453, 3455, 3456, 3457, 3458, 3460, 3461, 3462, 3463, 3464, 3466, 3467, 3468, 3469, 3471, 3472, 3473, 3475, 3476, 3477, 3478, 3479, 3480, 3482, 3483, 3484, 3485, 3486, 3487, 3488, 3489, 3490, 3491, 3492, 3493, 3494, 3495, 3496, 3497, 3498, 3499, 3500, 3501, 3502, 3503, 3504, 3505, 3506, 3516, 3518, 3519, 3520, 3521, 3522, 3523, 3524, 3525, 3526, 3527, 3527, 3528, 3529, 3530, 3532, 3533, 3534, 3536, 3537, 3539, 3540, 3541, 3542, 3543, 3544, 3545, 3546, 3547, 3548, 3549, 3550, 3550, 3551, 3553, 3555, 3556, 3557, 3558, 3559, 3561, 3563, 3564, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3586, 3587, 3589, 3591, 3592, 3594, 3595, 3597, 3598, 3599, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3609, 3610, 3612, 3613, 3631, 3632, 3633, 3635, 3636, 3637, 3638, 3639, 3640, 3641, 3644, 3645, 3646, 3647, 3648, 3649, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3659, 3663, 3665, 3666, 3667, 3668, 3669, 3670, 3672, 3673, 3675, 3677, 3678, 3679, 3681, 3682, 3683, 3684, 3685, 3686, 3687, 3688, 3689, 3691, 3693, 3694, 3694, 3695, 3696, 3697, 3698, 3699, 3700, 3701, 3702, 3704, 3705, 3706, 3707, 3708, 3718, 3719, 3720, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3743, 3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3754, 3759, 3761, 3762, 3773, 3774, 3775, 3776, 3779, 3780, 3781, 3782, 3783, 3784, 3788, 3789, 3790, 3792, 3809, 3810, 3811, 3812, 3814, 3815, 3816, 3817, 3818, 3819, 3820, 3822, 3823, 3824, 3833, 3834, 3835, 3836, 3837, 3838, 3839, 3840, 3841, 3842, 3843, 3844, 3845, 3846, 3846, 3847, 3849, 3850, 3851, 3852, 3853, 3855, 3856, 3857, 3859, 3860, 3861, 3862, 3863, 3863, 3864, 3865, 3866, 3867, 3868, 3869, 3870, 3871, 3872, 3873, 3874, 3875, 3876, 3877, 3880, 3881, 3881, 3886, 3887, 3888, 3889, 3890, 3891, 3892, 3893, 3902, 3903, 3904, 3905, 3906, 3910, 3912, 3914, 3916, 3917, 3918, 3920, 3921, 3922, 3923, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3945, 3946, 3948, 3949, 3950, 3952, 3957, 3958, 3959, 3960, 3961, 3962, 3963, 3964, 3965, 3966, 3967, 3968, 3971, 3975, 3977, 3979, 3980, 3982, 3983, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 3993, 3994, 3995, 3998, 3999, 4000, 4001, 4003, 4007, 4009, 4010, 4011, 4012, 4013, 4014, 4017, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4032, 4033, 4035, 4036, 4038, 4039, 4040, 4042, 4043, 4045, 4046, 4047, 4048, 4049, 4050, 4060, 4061, 4062, 4064, 4065, 4066, 4067, 4068, 4069, 4071, 4073, 4074, 4075, 4077, 4079, 4080, 4082, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4090, 4091, 4092, 4093, 4093, 4094, 4095, 4096, 4097, 4099, 4100, 4101, 4102, 4102, 4103, 4104, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4127, 4129, 4130, 4131, 4133, 4134, 4135, 4136, 4138, 4139, 4140, 4141, 4142, 4143, 4145, 4146, 4160, 4165, 4166, 4167, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4174, 4175, 4176, 4178, 4179, 4180, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4189, 4191, 4192, 4194, 4195, 4196, 4197, 4199, 4200, 4201, 4202, 4204, 4205, 4207, 4209, 4210, 4212, 4213, 4214, 4215, 4224, 4226, 4227, 4228, 4229, 4230, 4231, 4232, 4233, 4234, 4236, 4237, 4239, 4240, 4242, 4243, 4246, 4248, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4260, 4261, 4262, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4286, 4287, 4289, 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4302, 4303, 4304, 4307, 4308, 4309, 4310, 4311, 4312, 4315, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343, 4346, 4348, 4350, 4351, 4353, 4354, 4356, 4357, 4359, 4362, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4377, 4378, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4391, 4395, 4399, 4407, 4408, 4409, 4410, 4411, 4412, 4413, 4414, 4415, 4416, 4423, 4423, 4424, 4425, 4425, 4426, 4427, 4431, 4432, 4433, 4435, 4436, 4437, 4438, 4439, 4440, 4441, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4451, 4452, 4453, 4454, 4455, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4464, 4465, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4514, 4515, 4517, 4518, 4519, 4520, 4521, 4522, 4590, 4591, 4592, 4594, 4596, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4641, 4642, 4643, 4644, 4645, 4646, 4650, 4652, 4653, 4654, 4655, 4656, 4657, 4666, 4667, 4668, 4669, 4671, 4672, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4687, 4693, 4694, 4695, 4697, 4698, 4699, 4699, 4700, 4701, 4702, 4703, 4703, 4704, 4705, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4728, 4729, 4730, 4731, 4732, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4773, 4774, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4794, 4795, 4797, 4798, 4799, 4801, 4802, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4837, 4838, 4839, 4840, 4841, 4842, 4844, 4845, 4847, 4855, 4856, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4877, 4878, 4879, 4880, 4881, 4881, 4882, 4883, 4884, 4886, 4887, 4888, 4890, 4891, 4893, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4947, 4948, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4960, 4961, 4962, 4965, 4966, 4968, 4969, 4970, 4971, 4976, 4977, 4978, 4980, 4981, 4983, 4985, 4987, 4988, 4989, 4990, 4991, 4992, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5006, 5008, 5009, 5010, 5011, 5013, 5015, 5016, 5018, 5019, 5020, 5021, 5022, 5024, 5025, 5026, 5028, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5037, 5038, 5039, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5061, 5062, 5063, 5067, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5087, 5088, 5089, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5129, 5130, 5131, 5132, 5133, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5143, 5144, 5145, 5146, 5147, 5148, 5149, 5151, 5152, 5153, 5154, 5155, 5156, 5157, 5158, 5161, 5162, 5163, 5164, 5165, 5166, 5167, 5168, 5169, 5170, 5173, 5176, 5176, 5177, 5178, 5179, 5180, 5182, 5183, 5185, 5186, 5187, 5189, 5190, 5192, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5200, 5201, 5202, 5204, 5205, 5206, 5209, 5209, 5210, 5212, 5213, 5215, 5217, 5218, 5219, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5240, 5240, 5241, 5242, 5243, 5245, 5246, 5247, 5248, 5249, 5256, 5257, 5258, 5259, 5260, 5261, 5263, 5264, 5265, 5267, 5268, 5276, 5277, 5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288, 5289, 5290, 5291, 5293, 5294, 5295, 5296, 5297, 5298, 5299, 5300, 5302, 5303, 5304, 5305, 5306, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5318, 5319, 5320, 5327, 5328, 5329, 5330, 5331, 5332, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5348, 5349, 5350, 5352, 5353, 5354, 5355, 5356, 5357, 5358, 5359, 5360, 5361, 5362, 5363, 5364, 5365, 5366, 5367, 5369, 5370, 5371, 5372, 5373, 5374, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5400, 5401, 5402, 5403, 5404, 5405, 5406, 5407, 5408, 5410, 5411, 5411, 5412, 5412, 5413, 5414, 5415, 5416, 5417, 5418, 5419, 5420, 5421, 5422, 5423, 5429, 5431, 5432, 5433, 5434, 5435, 5436, 5437, 5438, 5439, 5441, 5442, 5443, 5444, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5460, 5461, 5462, 5463, 5464, 5465, 5472, 5473, 5474, 5475, 5476, 5477, 5478, 5479, 5480, 5481, 5482, 5483, 5484, 5485, 5486, 5487, 5488, 5489, 5490, 5491, 5494, 5495, 5496, 5497, 5500, 5501, 5502, 5503, 5506, 5507, 5508, 5509, 5510, 5512, 5513, 5515, 5516, 5517, 5518, 5519, 5520, 5522, 5523, 5524, 5525, 5526, 5527, 5527, 5529, 5530, 5531, 5532, 5543, 5544, 5545, 5547, 5548, 5549, 5550, 5551, 5552, 5553, 5554, 5555, 5556, 5557, 5558, 5561, 5562, 5564, 5565, 5567, 5568, 5569, 5570, 5571, 5573, 5574, 5575, 5577, 5578, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5594, 5595, 5596, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615, 5616, 5618, 5620, 5622, 5640, 5642, 5643, 5644, 5645, 5646, 5648, 5649, 5650, 5651, 5652, 5653, 5654, 5655, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5688, 5689, 5690, 5692, 5693, 5694, 5695, 5696, 5697, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5713, 5714, 5715, 5716, 5717, 5718, 5719, 5720, 5721, 5721, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5735, 5736, 5737, 5738, 5739, 5740, 5743, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5763, 5764, 5766, 5767, 5768, 5775, 5776, 5777, 5778, 5779, 5780, 5781, 5782, 5783, 5784, 5785, 5793, 5794, 5795, 5796, 5797, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5818, 5819, 5820, 5822, 5823, 5824, 5826, 5827, 5828, 5829, 5830, 5831, 5832, 5857, 5858, 5859, 5866, 5868, 5869, 5869, 5870, 5871, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879, 5880, 5881, 5882, 5883, 5884, 5885, 5886, 5887, 5888, 5889, 5891, 5893, 5894, 5895, 5896, 5897, 5900, 5901, 5902, 5903, 5904, 5905, 5906, 5907, 5908, 5909, 5909, 5910, 5911, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5929, 5930, 5931, 5932, 5934, 5935, 5936, 5937, 5938, 5939, 5940, 5942, 5943, 5944, 5945, 5946, 5947, 5948, 5952, 5953, 5954, 5955, 5956, 5957, 5958, 5959, 5960, 5962, 5963, 5965, 5967, 5968, 5970, 5972, 5973, 5974, 5975, 5976, 5977, 5977, 5978, 5979, 5980, 5981, 5982, 5984, 5985, 5986, 5987, 5988, 5989, 5991, 5991, 5992, 5993, 5997, 5998, 5999, 6000, 6002, 6004, 6005, 6006, 6008, 6009, 6010, 6011, 6012, 6013, 6023, 6024, 6025, 6026, 6027, 6028, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6040, 6041, 6042, 6043, 6045, 6046, 6047, 6048, 6049, 6050, 6051, 6052, 6053, 6054, 6055, 6057, 6058, 6059, 6060, 6061, 6062, 6064, 6065, 6065, 6066, 6067, 6068, 6069, 6072, 6073, 6074, 6075, 6076, 6077, 6079, 6080, 6081, 6082, 6083, 6084, 6085, 6087, 6088, 6089, 6090, 6091, 6092, 6093, 6094, 6096, 6099, 6100, 6101, 6102, 6103, 6119, 6121, 6122, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6140, 6142, 6143, 6144, 6145, 6148, 6149, 6150, 6151, 6152, 6159, 6162, 6163, 6164, 6165, 6166, 6167, 6168, 6168, 6169, 6170, 6171, 6172, 6173, 6174, 6175, 6175, 6176, 6178, 6179, 6181, 6182, 6184, 6185, 6186, 6192, 6195, 6196, 6197, 6198, 6199, 6200, 6201, 6202, 6203, 6204, 6205, 6209, 6210, 6211, 6212, 6213, 6214, 6222, 6224, 6227, 6228, 6229, 6230, 6231, 6232, 6233, 6234, 6236, 6237, 6238, 6239, 6240, 6248, 6249, 6250, 6251, 6252, 6253, 6254, 6255, 6256, 6257, 6258, 6259, 6260, 6261, 6262, 6263, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6272, 6273, 6274, 6275, 6276, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6286, 6287, 6288, 6289, 6290, 6293, 6297, 6298, 6300, 6301, 6302, 6303, 6304, 6305, 6306, 6308, 6314, 6315, 6317, 6318, 6320, 6321, 6322, 6323, 6324, 6325, 6326, 6327, 6328, 6329, 6330, 6331, 6332, 6333, 6335, 6336, 6337, 6338, 6339, 6342, 6343, 6343, 6347, 6348, 6349, 6350, 6351, 6352, 6353, 6354, 6356, 6356, 6357, 6358, 6360, 6361, 6362, 6364, 6366, 6367, 6369, 6370, 6373, 6373, 6375, 6376, 6377, 6378, 6379, 6381, 6382, 6383, 6384, 6385, 6386, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6410, 6411, 6412, 6414, 6415, 6416, 6417, 6418, 6419, 6420, 6421, 6422, 6424, 6425, 6426, 6428, 6429, 6430, 6432, 6433, 6434, 6435, 6436, 6437, 6438, 6439, 6441, 6442, 6443, 6443, 6444, 6445, 6446, 6447, 6448, 6449, 6450, 6452, 6453, 6453, 6456, 6457, 6458, 6459, 6460, 6461, 6462, 6464, 6465, 6466, 6467, 6467, 6468, 6469, 6470, 6471, 6472, 6473, 6474, 6475, 6476, 6477, 6478, 6479, 6481, 6482, 6483, 6484, 6486, 6487, 6488, 6489, 6490, 6491, 6492, 6493, 6494, 6495, 6495, 6496, 6497, 6498, 6499, 6500, 6501, 6501, 6503, 6504, 6505, 6507, 6508, 6509, 6510, 6511, 6512, 6513, 6514, 6516, 6518, 6519, 6520, 6521, 6522, 6523, 6524, 6525, 6526, 6527, 6528, 6529, 6530, 6531, 6532, 6533, 6534, 6535, 6536, 6536, 6537, 6538, 6539, 6540, 6541, 6542, 6543, 6544, 6545, 6546, 6548, 6549, 6550, 6551, 6552, 6554, 6555, 6556, 6557, 6558, 6559, 6560, 6562, 6563, 6564, 6566, 6567, 6568, 6569, 6570, 6571, 6572, 6573, 6574, 6575, 6576, 6577, 6578, 6579, 6580, 6581, 6582, 6583, 6584, 6586, 6587, 6588, 6589, 6590, 6591, 6592, 6594, 6596, 6597, 6598, 6600, 6601, 6603, 6603, 6604, 6604, 6605, 6605, 6612, 6613, 6614, 6615, 6616, 6617, 6618, 6619, 6620, 6621, 6622, 6623, 6624, 6625, 6627, 6628, 6629, 6630, 6631, 6632, 6633, 6634, 6635, 6636, 6637, 6638, 6639, 6640, 6641, 6642, 6644, 6645, 6646, 6647, 6649, 6650, 6651, 6652, 6653, 6654, 6655, 6656, 6657, 6658, 6659, 6660, 6662, 6665, 6666, 6667, 6669, 6670, 6671, 6676, 6677, 6678, 6679, 6680, 6682, 6686, 6689]


        # for question in questions:
        outfit_ids = []
        choices_ids = []
        # gt = []
        # valid = []
        # keep only a subset of the outfit
        # if subset:
        #     outfit_subset = np.random.choice(question[0], 3, replace=False)
        # else:
        #     outfit_subset = question[0]
        for index in question: # indexes of outfit nodes                
            # full_choices.remove(index)
            # print([i in full_choices for i in outfit_subset])
            i = 0
            for index_answer in full_choices: # indexes of possible choices answers
                outfit_ids.append(index)
                choices_ids.append(index_answer)
                # gt.append(int(i==0))# the correct connection is the first
                # a link is valid if the candidate item is from the same category as the missing item
                # valid.append(int(question[2][i] == question[3]))
                i += 1

        # question adj with only the outfit edges
        question_adj = sp.csr_matrix((n_nodes, n_nodes))
        question_adj = question_adj.tolil()
        if not expand_outfit:
            for j,u in enumerate(question[:-1]):
                for v in question[j+1:]:
                    question_adj[u, v] = 1
                    question_adj[v, u] = 1

        if K > 0:
            # the K edges that will be sampled from each not will not belong to the outfit, and should not be the query edges, so remove them
            available_adj = self.test_adj.copy()
            available_adj = available_adj.tolil()
            for j,u in enumerate(question[:-1]):
                for v in question[j+1:]:
                    available_adj[u, v] = 0
                    available_adj[v, u] = 0
            if expand_outfit: # activate intra-outfit edges
                for j,u in enumerate(question[:-1]):
                    for v in question[j+1:]:
                        available_adj[u,v] = 1
                        available_adj[v,u] = 1
            for u, v in zip(outfit_ids, choices_ids):
                available_adj[u, v] = 0
                available_adj[v, u] = 0
            available_adj = available_adj.tocsr()
            available_adj.eliminate_zeros()

            G = Graph(available_adj)

            extra_edges = []
            # now fill the adj matrix with the expanded edges for each node (only for the choices)
            nodes_to_expand = choices_ids[:4]

            if expand_outfit: # expand the outfit items as well
                nodes_to_expand.extend(question)

            for node in nodes_to_expand:
                edges = G.run_K_BFS(node, K)

                for edge in edges:
                    u, v = edge
                    question_adj[u, v] = 1
                    question_adj[v, u] = 1
                    extra_edges.append(edge)

        question_adj = question_adj.tocsr()
        return question_adj, np.array(outfit_ids), np.array(choices_ids)
            # yield question_adj, np.array(outfit_ids), np.array(choices_ids), np.array(gt), np.array(valid)

    def get_test_compatibility(self):
        """
        This function is not used now, becaue full_adj is empty because all the edges have been removed
        """
        self.setup_test_compatibility()

        flat_questions = []
        gt = []
        q_ids = []
        q_id = 0
        for outfit in self.comp_outfits:
            items = outfit[0]
            for i in range(len(items)):
                for to_idx in items[i+1:]:
                    from_idx = items[i]
                    flat_questions.append([from_idx, to_idx])
                    gt.append(outfit[1])
                    q_ids.append(q_id)
            q_id += 1

        assert len(flat_questions) == len(gt) and len(q_ids) == len(gt)
        assert len(self.comp_outfits) == max(q_ids)+1

        flat_questions = np.array(flat_questions)
        gt = np.array(gt)
        q_ids = np.array(q_ids)

        # now build the adj for message passing for the questions, by removing the edges that will be evaluated
        lower_adj = getattr(self, 'lower_{}_adj'.format('test'))

        full_adj = lower_adj + lower_adj.transpose()
        full_adj = full_adj.tolil()
        for edge, label in zip(flat_questions, gt):
            u, v = edge
            full_adj[u, v] = 0
            full_adj[v, u] = 0

        full_adj = full_adj.tocsr()
        full_adj.eliminate_zeros()

        # make sure that none of the query edges are in the adj matrix
        count_edges = 0
        count_pos = 0
        for edge in flat_questions:
            u,v = edge
            if full_adj[u,v] > 0:
                count_pos += 1
            count_edges += 1
        assert count_pos == 0

        return full_adj, flat_questions[:, 0], flat_questions[:, 1], gt, q_ids

    def setup_test_compatibility(self, resampled=False):
        """
        """
        comp_file = self.path_dataset + 'compatibility_test.json'
        if resampled:
            comp_file = self.path_dataset + 'compatibility_RESAMPLED_test.json'
        with open(comp_file) as f:
            self.comp_outfits = json.load(f)
